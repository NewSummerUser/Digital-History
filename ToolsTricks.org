#+CATEGORY: assignments
#+TAGS: 
#+DESCRIPTION: 
#+TITLE: Pages
#+PROPERTY: PARENT 16
#+STARTUP: customtime
#+HUGO_MENU: :menu main :parent Tools
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_BASE_DIR: ./dh-website/
#+HUGO_SECTION: tools
#+HUGO_STATIC_IMAGES: images
#+HUGO_MENU: :menu main :weight 10
#+HUGO_CUSTOM_FRONT_MATTER: :banner "testbanner"
#+MACRO: ts (eval (get-ts+7))

* Setup
:PROPERTIES:
:ID:       o2b:fc94ff3d-ce65-4f54-a855-e2fc0ade2de4
:POST_DATE: [2017-01-06 Fri 11:25]
:POSTID:   577
:EXPORT_FILE_NAME: setup
:END:
For the duration of this course, you will need to set up a "development environment" to do your work. You'll need to download,install, and interact with a group of programs and services that make it possible to do your work. Setting your environment up can be difficult, so be sure to budget some time to do so! Also be aware that these tools will take up significant spae on your laptop and may cause your laptop to slow down somewhat if run simultaneously with 
** Platform Notes
I run [[https://archlinux.org][Arch Linux]] on my laptop, and have experience with [[https://www.ubuntu.com/][Ubuntu]] as well. For the purposes of this class, I have installed Windows 10 Education Edition ([[https://uoft.onthehub.com/WebStore/Security/Signin.aspx][available free to U of T students here]]).  I wil also attempt to support MacOS as best I can.

- if you have an earlier edition of Windows, some of our tools may not work properly. I encourage you to upgrade to Windows 10 Education Edition, which has good support for modern tools.
- if you have a Chromebook, you will need to install a full Linux OS in order to do the coursework. [[https://wiki.galliumos.org/Welcome_to_the_GalliumOS_Wiki][Gallium OS]] and [[https://github.com/dnschneid/crouton][Crouton]] are the two recommended tools for this, and you can find [[https://arstechnica.com/gadgets/2017/06/how-to-install-linux-on-a-chromebook/][some instructions here]]. It's not easy, and I won't be able to help you.  If this seems hard, you may want to think about buying an inexpensive, older laptop and installing an ordinary Linux distribution.  [[https://fossbytes.com/best-lightweight-linux-distros/][Here are]] [[https://fossbytes.com/best-linux-distro-beginners/][two lists]] of distributions, but the choice is up to you. .
** Details
Here's the table of tools from the syllabus:
| Tool                   | On Mac                       | On Windows                                     | On Linux                           |
|------------------------+------------------------------+------------------------------------------------+------------------------------------|
| Real Web Browser       | [[https://www.mozilla.org/en-US/firefox/][Firefox]] and/or [[https://www.google.com/chrome/][Chrome]]        | [[https://www.mozilla.org/en-US/firefox/][Firefox]] and/or [[https://www.google.com/chrome/][Chrome]]                          | [[https://www.mozilla.org/en-US/firefox/][Firefox]] and/or [[https://www.google.com/chrome/][Chrome]]              |
| Text Editor            | [[https://atom.io/][Atom]]                         | [[https://atom.io/][Atom]]                                           | [[https://atom.io/][Atom]]                               |
| Bash Shell Environment | Terminal (Built in)          | [[https://git-for-windows.github.io/][Git for Windows]] or [[https://msdn.microsoft.com/en-us/commandline/wsl/install-win10][Windows Subsystem for Linux]] | gnome-terminal, qterm, etc         |
| Git Version Control    | [[https://sourceforge.net/projects/git-osx-installer/files/][Git for OSX]]                  | [[https://git-for-windows.github.io/][Git for Windows]]                                | ~apt-get install git~              |
| Git Visualization      | [[https://www.gitkraken.com/][gitKraken]]                    | [[https://www.gitkraken.com/][gitKraken]]                                      | [[https://www.gitkraken.com/][gitKraken]]                          |
| Github Org Membership  | [[https://github.com/join][Sign up here]]                 | [[https://github.com/join][Sign up here]]                                   | [[https://github.com/join][Sign up here]]                       |
| Node and NPM           | [[https://nodejs.org/en/download/][Node Website]] ([[http://nodesource.com/blog/installing-nodejs-tutorial-mac-os-x/][guide]])         | [[https://nodejs.org/en/download/][Node Website]] ([[https://wsvincent.com/install-node-js-npm-windows/][guide]])                           | [[https://nodejs.org/en/download/][Node Website]] ([[https://nodejs.org/en/download/package-manager/][distro instructions]]) |
| Slack Community        | [[https://slack.com/downloads][Client Download]], [[https://join.slack.com/t/digitalhistoryuoft/signup][Signup Link]] | [[https://slack.com/downloads][Client Download]], [[https://join.slack.com/t/digitalhistoryuoft/signup][Signup Link]]                   | [[https://slack.com/downloads][Client Download]], [[https://join.slack.com/t/digitalhistoryuoft/signup][Signup Link]]       |

If you're comfortable exploring and installing software, you can probably get set up quickly by following the links above. *Please nonetheless read the detailed instructions below.* Things will go smoother if you do!
** Web browser
All of our work will involve interacting with the World Wide Web. Firefox and Chrome are head and shoulders above all other web browsers, and you should install one (or preferably both) of them. In class, I will use Firefox almost exclusively. If you haven't tried Firefox for a while, give the new Quantum version a try' it is much, much faster and more stable than its predecessors.  

Both have highly sophisticated *developer tools* with which you should familiarize yourself. As you learn more about web design, you'll come to rely on these tools more and more. Follow these links for more about [[https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector][Firefox Dev Tools]] and [[https://developer.chrome.com/devtools][Chrome's version]]. 

Of particular value in both Chrome and Firefox is the "Javascript Consoles," accessible from the developer tools: ~Tools \rarr Web Developer \rarr Console~ or ~Menu \rarr More Tools \rarr Developer \rarr Console~

The Firefox console is a little awkward to use for multi-line programming, so they have also provided a "Scratchpad" tool (~Shift-F4~), which I find helpful, though I now use Atom's Javascript console instead (see "Text Editor", below). 

The other tool I use all the time is "inspect element", available by right-clicking on any part of a web page.  Both of these tools will prove *essential* for figuring out why your code isn't working right!
** Text Editor
:PROPERTIES:
:ID:       o2b:19eea94a-1f1c-410a-b660-6c2c6354ca22
:POST_DATE: [2017-01-06 Fri 11:27]
:POSTID:   573
:BLOG:     dig
:END:
If you want to code, you have to write like a coder. This means using a powerful text editor. In this class we use [[https://atom.io/][Atom]].  Please follow the download links and install to your computer. Once you've read the first chapter or two of the [[http://flight-manual.atom.io/][Manual]], go ahead and [[http://flight-manual.atom.io/using-atom/sections/atom-packages/][install some extra packages]] by navigating to Edit \rarr Preferences \rarr + Install, as described in detail [[https://flight-manual.atom.io/using-atom/sections/atom-packages/][in the excellent Atom manual]]. I have prepared a package called [[https://atom.io/packages/history-hack-pack][history-hack-tools]], which will install all the tools I'll be using during class. Please install that one by searching for its name in the search box. The functionalities fo the various packages are briefly described in the package description.

** Command Line
Web developers and digital humanists spend a lot of their time in the /command-line environment/, interacting with their computers through text-based commands instead of a mouse or voice interface.  It takes some time to learn to use the command-line, but it's a very powerful and effective way to work once you get used to it. One goal of this course is to help you get comfortable in this environment and learn to take advantage of its power.  

There are actually many different command-line environments; in this class we use [[https://www.gnu.org/software/bash/][bash]], the most popular.  

On Mac and Linux, bash is built in to the system.  In Mac, open the ~Terminal~ app to find the bash prompt; in Linux you may have any of several terminal emulators installed, search your program list for "term" to find yours.  

In Windows, bash comes with the Git installation -- follow the instructions below. Note that very recent editions of Windows 10 come with the "Wondows Subsystem for Linux, which you can use instead of the Git Bash method.  

** Git, Github, and GitKraken
:PROPERTIES:
:ID:       o2b:bc40c086-76d9-4027-9fb3-ee6748e031bc
:POST_DATE: [2017-01-06 Fri 11:27]
:END:
Software development is made *vastly* easier by "[[https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control][version control]]" systems: specialized software that keeps track of the history and current state of files and directories. In the past there were many such systems, but now almost the whole user uses [[https://git-scm.com/][git]], and we're all grateful for it.  

*** Install Git
To install git, follow the [[https://git-scm.com/downloads][download links]] on the website (see the table above for OS-specific links and instructions. We'll come back to the Git command-line in a minute.  

*** Sign up for Github
For many developers -- maybe even most of them -- using Git is intimately tied to the [[https://github.com][Github]] code-sharing website.  We'll be using Github for almost all of our work this semester, so it's important that you get familiar with it.  If you were present for the first class, you've already done this. If not, you'll need to [[https://github.com/join][sign Up for a Github account]]. Once you've done that, you have two choices:
- practice working at the command line
- go straight to a GUI ("Graphical User Interface") that will make working with git a little more comfortable.  

I recommend at least trying the command line first.  

*** Command-line Setup
You need to tell git a little bit about yourself. Start with your [[https://help.github.com/articles/setting-your-email-in-git/][email address]] and [[https://help.github.com/articles/setting-your-username-in-git/][your user name]]. Open your bash shell (Terminal in Mac, git-bash in Windows) and type:
#+BEGIN_SRC sh
    git config --global user.name "Your Name"
    git config --global user.email "youraddress@ mail.utoronto.a"
#+END_SRC
Great -- now git knows who you are. If you're feeling ambitious, you can also [[https://help.github.com/articles/connecting-to-github-with-ssh/][set up SSH keys so you don't have to type in your password every time you commit to Git]].  

*** Using the GitKraken GUI client
Sometimes it's nice to have a backp. [[https://www.gitkraken.com/][GitKraken]] is an impressive visual tool that also makes it easy to [[https://support.gitkraken.com/start-here/profiles][configure all of your information]].  They have a nice video about [[https://support.gitkraken.com/integrations/authentication][SSH integration]], which you can watch if you like.

*** Learn more
There is a somewhat more wordy [[http://digital.hackinghistory.ca/introduction-to-github][Git tutorial on this website]], which you should read. For now, [[https://desktop.github.com/][Install the Github Desktop App]] which also includes the command-line version of git.  You can follow the [[https://github.com/jlord/git-it-electron/releases][excellent tutorial in the downloadable git-it application]], as well as the [[https://help.github.com/desktop/guides/][Github Desktop documentation]].  There is also a [[http://programminghistorian.org/lessons/getting-started-with-github-desktop][quite helpful tutorial on The Programming Historian]]. We'll be discussing Git and Github further in our first class.
** Node and NPM
Most of our programming work will involve Javascript, which runs most of the web. The [[https://nodejs.org/en/][Node.js]] environment and its "package manager," [[https://www.npmjs.com/][NPM]], are an incredible resource for Javascript development. In fact, Slack, Atom, and gitKraken are all written as Node applications themselves! Installing the "bare" versions of node and NPM lets us access some of that power while we work.  

You can survive this class without installing Node, but without it, you won't be able to run the test suites that accompany all of the assignments. You'll therefore be at a serious disadvantage in the class.  

- In Mac and Linux, the instructions linked to in the table above are probably good enough.
- In Windows, you may follow all the instructions and then find yourself getting an error ("~Command not found~"). If that happens, you may want to try [[http://blog.theodo.fr/2017/01/use-git-ssh-and-npm-on-windows-with-git-bash/][the instructions laid out here]], or if you're on Windows 10, [[https://hackernoon.com/running-nodejs-on-linux-on-windows-88bd12993bae][you could go crazy and install the amazing Windows Subsystem for Linux]], which allows you to work as if your computer had a real Unix operating system like everyone else.  
The details of Node and NPM are a little outside the scope of our class, but [[https://info343.github.io/machine-setup.html#node-and-npm][a colleague at the University of Washington]] has an excellent introduction in one of his courses.  

** Slack
Slack is not strictly necessary to do your work, but it is the principal means of conversation for the class. Your activity in our Slack team is part of your participation assessment. So, please sign up for the team using the signup links above, and if you're not familiar with Slack already, read [[https://get.slack.help/hc/en-us/search?utf8=%E2%9C%93&query=bold+italic&commit=Search][some of the Slack documentation]]. 
* More about Git and Github!
  :PROPERTIES:
  :CUSTOM_ID: introduction-to-github
  :CLASS: entry-title
  :END:

This is a preliminary introduction to the [[https://git-scm.com/][Git revision control system]]. Git is the most powerful and widely-used [[https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control][version control]] system in the world; it is primarily used by software
developers but is enormously useful for any text-based document
repository and is [[https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control][increasingly being used by humanists to share their work]] . You can find git
repositories for [[https://github.com/titaniumbones?tab=repositories][most of my teaching materials]], for instance.

I /strongly/ recommend you follow this lesson up by
[[http://git-scm.com/book/en/v2][reading the Git book]], especially the first 2 or 3 chapters.

Most people love git once they start to use it, but it can be very frustrating and difficult at the beginning. We'll go over it once, kind of quickly, then try a real-world example (checking out the first assignment.

** Learn by example:
History-Please
   :PROPERTIES:
   :CUSTOM_ID: orga4f1831
   :END:

(This recapitulates much of what we did in the first class. Feel free to
skip.) My friend [[https://twitter.com/k88hudson?lang=en][Kate Hudson]] created a simple Github training exercise last year for some of my other students. It was really fun, so I modified it for us:

1. [[https://github.com/join][Sign Up for a Github Account]] (or sign in    if you already have an account)
2. Navigate to [[https://github.com/titaniumbones/history-please][my history-please repository]]
3. Take a quick look at the [[https://github.com/titaniumbones/heroes-please/blob/master/README.md][README]].
   Can you understand it? Maybe we need to add some extra instructions
   (like, what does =npm install -g= mean? And where do those [[http://www.emoji-cheat-sheet.com/][emoji]] come from?) What does the program do, and (if you can get this far) how does it work? *At this point you can continue to follow these instructions, or just switch over to the README for a slightly more up-to-date explanation of forking, pulling, and merging.*
4. Have you found where the History lives?
5. Add a new piece of history *from inside Github itself(!)* by following the direction in the README under ~Contributing~.

   - Be sure to name the file “some-persons-name.md” (or “some-event-name.md”, or “some-trend-name.md”) so that everyone knows it's written in Markdown
   - follow Markdown syntax in writing your recipe (see    [[https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet][this cheatsheet]], especially the sections on Headings, Lists, and Links)
   - When you save the file, Github will *automatically create a forked repository under your account!* Magic. *Before you hit save, read the next step!!*

   [[http://digital.hackinghistory.ca/wp-content/uploads/2017/01/wpid-create-file.jpeg]]

6. *Important!* You'll be given a choice between “Committing directly to master” and “Creating a new branch”. Choose the latter option and then follow the instructions to submit a pull request. Amazing! [[http://digital.hackinghistory.ca/wp-content/uploads/2017/01/wpid-commit-options.png]]
7. When filling out the pull request, please take note of the “base” branch -- by default, Github *will not* to this properly for you. Make sure that the base points to =titaniumbones/master=. If you can't figure this out, then commit to your own “master” branch. Then, navigate back to the front page, and create a =New Pull Request= by
   clicking on the button on the upper left. At this point my repo will be the only option you're given.

<<outline-container-orgb642d09>>
** Getting started: Installing Git
   :PROPERTIES:
   :CUSTOM_ID: orgb642d09
   :END:

On Mac and Windows, simply [[https://desktop.github.com/][install Github
Desktop]]. Command-line commands can be executed in the git shell within
GH Desktop, or in the terminal.app on Mac. On Linux, use your package
manager and the terminal, eg. on Ubuntu:

#+BEGIN_EXAMPLE
    sudo apt-get install git
#+END_EXAMPLE

or on Arch

#+BEGIN_EXAMPLE
    sudo pacman -S git
#+END_EXAMPLE

The [[https://github.com/jlord/git-it-electron/releases][git-it tutorial]] is also pretty helpful, so consider installing it.

** Using Github Desktop (GHD)
   :PROPERTIES:
   :CUSTOM_ID: orgda605c7
   :END:

This tells git some basic information about you, which it will use later
on. In GHD, also configure your github acocunt credentials. Your
repositories will all now be available from inside GHD, so to edit a new
repository just fork an existing Githup repo, then download it using
GHD.

Once you've downloaded a repository, open a file in Atom, make some
changes, and save.

GHD will see that you've made changes, and give you the opportunity to
make *commits.* Once you've committed your changes, you can *push your
changes* to the online and repository and *submit pull requests* to the
repository that you forked your code from.

<<outline-container-org13b2038>>
** Understanding how git works, and using the command line
*** Advanced Git for command-line users (Linux Users and Masochists
Only)
    :PROPERTIES:
    :CUSTOM_ID: org50aae1f
    :END:

<<text-org50aae1f>>
All of the above functionality is also available via the command-line

1. Choose an appropriate home for your repo and execute
   =git clone https://github.com/your-user-name/history-please.git= from
   the command line. The repository will be downloaded.
2. Add your directory to atom as a “project directory:
   [[http://digital.hackinghistory.ca/wp-content/uploads/2016/01/wpid-githb-add-project.png]]
3. Install the “git-plus” package in Atom
4. Create a new file in the appropriate place.
5. Choose menu item =Packages \rarr Git Plus \rarr Add=, then
   =Packages \rarr Git Plus \rarr Commit=, then
   =Packages \rarr Git Plus \rarr Push=

There's still tons to learn but this is a good start. If you are
intrigued, keep reading.

<<outline-container-orge78fcc1>>
*** Full workflow
    :PROPERTIES:
    :CUSTOM_ID: orge78fcc1
    :END:
- [[https://github.com/join][Sign Up for a Github Account]]
- [[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git][Install git w/out GHD]]
- [[https://github.com/titaniumbones/maps-with-markdown#fork-destination-box][Fork the Maps Assignment]]
- [[https://help.github.com/articles/set-up-git/][configure your git information]]
- [[https://help.github.com/articles/set-up-git/#next-steps-authenticating-with-github-from-git][Be   sure you can authenticate with github]]
- Create a local copy of the history-please repository by
  [[https://help.github.com/articles/fork-a-repo/#step-2-create-a-local-clone-of-your-fork][cloning it]]:
  =git clone git [at] github [dot] com:YOUR-USERNAME/history-please.git=
- Make some changes
- Commit your changes with =git commit -m "Useful Message Here" -a=
- *optional* Push your changes to the web with =git push=
- *optional*  [[https://help.github.com/articles/using-pull-requests/][Submit a pull request]]

*** Understanding Git “States”
A git repository has three important “areas”, each of which represents a
different “state”:

- Working Directory (Uncommitted)
- Staging Area (Staged)
- .git repository (Committed)

When you look at the repository, all you see is the *working directory*.
So, if I want to start a new project, I create an empty directory, say,
“Project”. Then I run the command:

#+BEGIN_SRC sh
    git init
#+END_SRC

This command creates the invisible =.git= subdirectory, which is the
real heart of the repo: it stores all the information about previous and
current states of the repository.

Then let's say I create a file and put some stuff in it. On the command
line you'd do that this way:

#+BEGIN_SRC sh
    echo "Hello, World" >> hello.txt
#+END_SRC

I alert git to its existence with

#+BEGIN_SRC sh
    git add hello.txt
#+END_SRC

Now git sees that =hello.txt= exists, /and/ the new file is “staged”.
Now execute:

#+BEGIN_SRC sh
    git commit -a -m "initial commit of hello.txt"
#+END_SRC

Git takes all of the changes from the “staging area”, and “commits” them
to the repository. All of this happens in the hidden =.git= directory --
you won't notice any changes to the files that you actually see.

<<outline-container-org7a3a94e>>
*** Doing and Undoing
    :PROPERTIES:
    :CUSTOM_ID: org7a3a94e
    :END:

<<text-org7a3a94e>>
Every time you commit your changes in git, git saves a snapshot of the
working directory to the .git repository. So, in principle, you can get
back to any earlier working state of the repository, which is awesome.
- commit :: the most elementary operation in git is “committing”; this
  saves your working directory to the repository. Here are the steps

  - make some changes
  - commit them with =git commit -a -m Message=

- checkout :: To inspect some other state of the repository, you will
  need to “checkout” that state: =git checkout HEAD~3= will checkout the
  version you were working on 3 saves ago, for instance.
- revert :: if you have totally screwed up your repository and want to
  completely undo your changes, then use =git checkout= to check out the
  last working state. Now just
  =git commit -m "revert to working state"=. And you're back to where
  you want to be.

<<outline-container-org62741fe>>
*** Branching
    :PROPERTIES:
    :CUSTOM_ID: org62741fe
    :END:

<<text-org62741fe>>
Sometimes you want to be able to come back to a particular revision --
maybe you have everything working fine, and you want to be sure you can
get back to the working state. Maybe you create an “experiments branch”
to work on; if it breaks, you can just switch back to the master branch
with no harm done.

#+BEGIN_SRC sh
    git branch # show branches 
    git branch -c experiment # create the experiment branch
    git checkout experiment # chekout the experiment branch; then work on it for a while
    git commit -a -m "added a cool new feature, but it doesn't quite work" # commit your changes
    git checkout master # go back to the master branch, since it still lworks and you need to use it for something.
#+END_SRC

If you're happy with your hcanges, maybe you want to actually commit
them to the master branch:

#+BEGIN_SRC sh
    git checkout experiment # chekout the experiment branch; then work on it for a while
    git commit -a -m "added a cool new feature, and it works" # commit your changes
    git checkout master # go back to the master branch
    git merge experiment # "merge" your changes.
#+END_SRC

For our purposes, you should really only ever work on *one branch at a
time*, or you're likely to run into problems beyond the scope of this
tutorial.

<<outline-container-orge471552>>
*** Push and Pull
    :PROPERTIES:
    :CUSTOM_ID: orge471552
    :END:

<<text-orge471552>>
When you're working together you may want to *pull* someone else's
changes or *push* your own to the group.

#+BEGIN_SRC sh
    git pull # get the most recent branch of your original repository
    git push # send all your commits on the current branch to the original repository
#+END_SRC

OK, that's what I've got for now. Follow the excellent links near the
top for more info. Good luck!

<<outline-container-org87403af>>
** Further Resources
   :PROPERTIES:
   :CUSTOM_ID: org87403af
   :END:

<<text-org87403af>>
There are many other resources available online. You can try some of
these.

- [[https://guides.github.com/activities/hello-world/][Hello World Guide
  on Github]]
- [[https://github.com/jlord/git-it-electron/releases][The excellent
  tutorial in the downloadable git-it application]]
- [[https://help.github.com/desktop/guides/][The sub-par Github Desktop
  documentation]]
- [[http://programminghistorian.org/lessons/getting-started-with-github-desktop][Helpful
  Tutorial on The Programming Historian]].
- [[http://gitimmersion.com/index.html][Git Immersion]]
- [[https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control][Official
  Git Book (quite technical)]]

- [[https://digital.hackinghistory.ca/03-spatial-history/][Assignment
  03: Spatial History]]
- [[https://digital.hackinghistory.ca/04-oral-history/][Assignment 04:
  Oral History]]
- [[https://digital.hackinghistory.ca/assignment-05-project-proposal/][Assignment
  05: Project Proposal]]
- [[https://digital.hackinghistory.ca/assignments/][Assignments]]
- [[https://digital.hackinghistory.ca/01-web-skills/][Assignments 01 and
  02: HTML & CSS self-study]]
- [[https://digital.hackinghistory.ca/basic-js-part-2-the-dom/][Basic JS
  Part 2: the DOM]]
- [[https://digital.hackinghistory.ca/][Digital History: His389, Winter
  2017]]
- [[https://digital.hackinghistory.ca/distant-reading-2/][Distant
  Reading 2]]
- [[https://digital.hackinghistory.ca/distant-reading-exercise-building-a-wordle/][Distant
  Reading Exercise: Building a Wordle]]
- [[https://digital.hackinghistory.ca/introducing-css/][Introducing
  CSS]]
- [[https://digital.hackinghistory.ca/introduction-to-github/][Introduction
  to Github!]]
- [[https://digital.hackinghistory.ca/javascript-basics-i-operators-loops-and-that-pesky-problem-1/][Javascript
  Basics I: Operators, Loops, and that Pesky Problem 1]]
- [[https://digital.hackinghistory.ca/learn-by-example-history-please/][Learn
  by example: History-Please]]
- [[https://digital.hackinghistory.ca/lecture-notes/][Lecture Notes]]
- [[https://digital.hackinghistory.ca/spatial-history-with-google-maps/][Spatial
  History with Google Maps]]
- [[https://digital.hackinghistory.ca/tools/][Tools]]

  - [[https://digital.hackinghistory.ca/tools/understanding-popcorn/][Understanding
    Popcorn]]
  - [[https://digital.hackinghistory.ca/tools/understanding-popcorn-2/][Understanding
    Popcorn]]

- [[https://digital.hackinghistory.ca/blogs/][Your Blogs]]

© 2017 HIS389: Digital History. Made with Love in
[[http://themefortress.com/reverie/][Reverie]].



#+DATE: [2015-07-21 Tue 13:48]
* Reading /Eloquent Javascript/
[[http://eloquentjavascript.net/][Eloquent Javascript]] is a a fantastic programming textbook, but it takes quite a bit of work to read. It's not always easy for us to read.  Many of the examples are a little more mathematical than some of us might like, and the selections we're reading leave out a lot.  Here are some notes to help you out, especially with the later chapters:
** Chapter 12
A lot of this will be review for you
* Javascript Basics
:PROPERTIES:
:EXPORT_FILE_NAME: javascript-basics
:END:
** Syntax
When we hear a set of instructions, we generally attend to the parts that are clear to us, and ignore or puzzle over the parts that aren't clear.  

*A computer does not work that way.* 

If Javascript sees something that is unclear, *it throws up its hands and gives up*. 

So for instance, 
** Variables 
A variable is a /container/; in Javascript, a  

** Quick JS Operator review
| Operator  | Meaning                                                                                                  |
|-----------+----------------------------------------------------------------------------------------------------------|
| =         | /sets/ the left hand variable equal to the right hand expression                                         |
| ==        | /tests/ whether the two sides of the the expression are equal                                            |
| ~===~     | tests whether they are /both/ the same /value/ and the same /type/ (generally we won't worry about this) |
| !=        | tests whether the two sides are /not/ equal                                                              |
| >,<,>=,<= | exactly what you expect                                                                                  |
| +=        | adds the right-hand expression to the left-hand variable                                                 |

Asa bonus here are a couple of string tricks:
| "\n"                    | prints a carriage return/new line                                                                                                                                                                                         |
| "\""                    | prints a quotation mark directly                                                                                                                                                                                          |
| "someletters".repeat(4) | This is a built-in method of every string -- it allows you to repeat the string easily without some kind of for loop (sorry guys! Didn't think of this initially!). prints "someletterssomeletterssomeletterssomeletters" |

** Loops


* COMMENT Javascript Basics I: Operators, Loops, and that Pesky Problem 1
:PROPERTIES:
:ID:       o2b:b830ce1b-4623-419c-a833-439f7612d4c8
:POST_DATE: [2016-02-03 Wed 12:53]
:BLOG:     dig
:POSTID:   511
:EXPORT_FILE_NAME: javascript-basics-i
:END:
** Quick JS Operator review
| Operator  | Meaning                                                                                                  |
|-----------+----------------------------------------------------------------------------------------------------------|
| =         | /sets/ the left hand variable equal to the right hand expression                                         |
| ==        | /tests/ whether the two sides of the the expression are equal                                            |
| ~===~     | tests whether they are /both/ the same /value/ and the same /type/ (generally we won't worry about this) |
| !=        | tests whether the two sides are /not/ equal                                                              |
| >,<,>=,<= | exactly what you expect                                                                                  |
| +=        | adds the right-hand expression to the left-hand variable                                                 |

Asa bonus here are a couple of string tricks:
| "\n"                    | prints a carriage return/new line                                                                                                                                                                                         |
| "\""                    | prints a quotation mark directly                                                                                                                                                                                          |
| "someletters".repeat(4) | This is a built-in method of every string -- it allows you to repeat the string easily without some kind of for loop (sorry guys! Didn't think of this initially!). prints "someletterssomeletterssomeletterssomeletters" |
** Usage
Here are some examples of their use:
#+BEGIN_SRC javascript
var a = 6;
var b = "6";
var c = 10;

if (a == b) {} // returns true
if (a === b) {} // returns false
if (a != c) {} // returns true
a += c; // sets value of a to 16
b += a; // sets the value of b to the string "66"
if (a < c) {} // returns true
#+END_SRC
** COMMENT Making sense of Question 1
Here's that annoying/difficult question 1 from the assignment again:
#+BEGIN_SRC javascript
/*
  Problem 1: 
  In chapter 2 of Eloquent Javascript, you learned how to make a simple ASCII-art
  triangle (exercise 2.1) and how to combine multiple loops for complex effects
  (exercise 2.3). Now, write a function that will produce a perfect ASCII-art V:
      *
     * *
    *   *
   *     *
  *       *

  This is trickier than it looks, so I've given you some starter code below. Fill it in
  until it works.  Test it in your browser console, or in the Eloquent Javascript coding sandbox.  

  Hint: your function will need to create loops inside loops. For each line, there is an initial offset,
  an asterisk, and then more spaces. In all but one cases there is then a final asterisk.  I'll leave 
  the math for you to figure out.  
*/

var makeV = function (height) {
    // we'll need to create a string
    // to log to the console later
    var v = "";
    // Outer loop -- we'll need "height" number of lines
    for (h=height; h>0; h--){
        // The line itself is composed of several parts:
        // an offset, a *, and generally some spacing after the *
        // and a second *. There's one case when this isn't true --
        // when is it?
        // in any case you will need some inner loops here. 
        // each loop should add some characters to v using v += ...
        // remember end-of-line is added to a string as "\n"

    }
    // output to the console
    console.log(v);
}

makeV(13); // test your code by running it in the console


#+END_SRC

To solve this problem, let's break it down into simple parts and do them one by one.
**  COMMENT Step 1: make a line of the correct height
The first thing to notice about this problem is that the v should be exactly "height" lines high.  SO, let's start by writing a function that just creates a line of stars "height" lines high:

#+BEGIN_SRC javascript
var makeV = function (height) {
    var v = "";
    // Outer loop -- we'll need "height" number of lines
    for (h=height; h>0; h--){
        v += "*\n";
    }
    // output to the console
    console.log(v);
}

makeV(13); 
#+END_SRC
** COMMENT Step 2: add spaces to the front of the line
The next step is to try to create a diagonal line of the form:
#+BEGIN_EXAMPLE
    *
   *
  *
 *
*
#+END_EXAMPLE
Looking carefully, we see that for a line of height ~5~, we need ~4~ spaces in front of the first ~*~, ~3~ in front of the next one, ec. down to 0.  How can we do this?  It's pretty simple:
#+BEGIN_SRC javascript
var makeV = function (height) {
    var v = "";
    // Outer loop -- we'll need "height" number of lines
    for (h=height; h>0; h--){
        v += " ".repeat(h-1) + "*\n";
    }
    // output to the console
    console.log(v);
}

#+END_SRC
do you spot the difference?
** COMMENT Step 3: add a second asterisk everywhere but the first line
OK, getting close. Now how do we get from a slanty line to a v? 
Here's our V again; this time, I'll replace the spaces with numbers to help us figure it out:
#+BEGIN_EXAMPLE
      *
     *1*
    *123*
   *12345*
  *1234567*
#+END_EXAMPLE
-----
- The first line is special -- there's only one asterisk
- The next line has 1 space
- The next has 3
- the next has 5
- the next has 7
So, number of spaces is UNDEFINED,1,3,5,7,9,etc. 

So, first thing we need to do is:
- do nothing if we're in the first line
- take some other action if we're in the second line
For now, let's just add a second asterisk to every line but the first one.  

Looking at our loop, we can tell that we'll be in the first line when ~h = ??~.  So, let's write that out:

#+BEGIN_SRC javascript
  var makeV = function (height) {
      var v = "";
      // Outer loop -- we'll need "height" number of lines
      for (h=height; h>0; h--){
          if (h==height) {
              v += " ".repeat(h-1) + "*\n" // this is what we had before
          } else {
              v += " ".repeat(h-1) + "*" + " ".repeat(2*(height-h) - 1) + "*\n";
          } // note that our "n" is "height -h" -- a little tricky to figure out at first
      }
      // output to the console
      console.log(v);
  }
#+END_SRC
** COMMENT Step 4: Add the right number of spaces between the asterisks
OK, let's cont the number of inter-asterisk spaces starting from the top:
| Line                    | Spaces | Pattern   |
|-------------------------+--------+-----------|
| next line (h=height -1) |      1 | (2*1) - 1 |
| next line (h=height -2) |      3 | (2*2) - 1 |
| next line (h=height -3) |      5 | (2*3) - 1 |
| next line (h=height -4) |      7 | (2*4) - 1 |

We have already taken care of the first line, so let's not worry about it anymore. Now, we need to figure out how to describe the pattern in a way tat Javascript understands.  Look at it carefully.  We have two variables, ~h~ and ~height~.  The total number of spaces is equal to ~twice the difference betwwen h and height, minus 1~. 

How can we write this in a way that Javascript understands? Well, we know these operators:
| *  | multiplication                   |
| +  | addition                         |
| -  | subtraction                      |
| () | mark off parts of the expression |

So, maybe we want this many spaces: 

~(2*(height - h)-1)~

Remember, to add spaces we'll use the built-in string "repeat" method; and we'll do so in between the two asterisks:
#+BEGIN_SRC javascript
var makeV = function (height) {
    var v = "";
    // Outer loop -- we'll need "height" number of lines
    for (h=height; h>0; h--){
        v += " ".repeat(h-1) + "*" + " ".repeat(2*(height-h) - 1) + "*\n";
    }
    // output to the console
    console.log(v);
}
#+END_SRC
Ta-da; done.
* Basic JS Part 2: the DOM
:PROPERTIES:
:ID:       o2b:9d7aefce-c129-4bbe-8646-93960d95d8a3
:POST_DATE: [2016-02-03 Wed 12:55]
:BLOG:     dig
:POSTID:   508
:EXPORT_FILE_NAME: basic-js-part-2-the-dom
:END:
** The DOM!
Your textbook will be much more eloquent than I on this topic.  Modifying the DOM -- the Document Object Model -- is the amazing wonderful coolest thing that Javascript does. This is a huge topic, but let's quickly scratch the surface:
** Understanding the DOM
The DOM is a *Javascript representation of the webpage*.  It is stored in a special object named ~document~ and can be both /accessed/ (read) and /manipulated/ (written) through that object's many, many functions.  The DOM takes the form of a tree: 
[[http://www.w3schools.com/js/pic_htmltree.gif]]

The individual nodes in the tree /also/ have many functions that are available to use.
** A couple of useful functions 
| <20>                                   | <60>                                                                                                              | <60>                                                                                                                                                                                                                                         |
| Function (or Attribute)                | What it does (or is)                                                                                              | Example                                                                                                                                                                                                                                      |
|----------------------------------------+-------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| document.getElementsByClassName(class) | Takes a /string/ argument (so, argument should be in quotes), and returns a list of nodes /that have that class/. | document.getElementsByClassName("outline-2")                                                                                                                                                                                                 |
| document.createElement(type)           | Creates a new element of type /type/                                                                              | ~var link = document.createElment("a")~ will create a new "a" node, which can then be added to the DOM in some place (see below)                                                                                                             |
| e.textContent                          | For an element or node "e", the attribute e.textContent is the text of that node                                  | if e is <td class=PM>Wilfred Laurier"</td>, then e.textContent is equal to "Wilfred Laurier"                                                                                                                                                 |
| e.href                                 | Stores the "href" attribute of any element                                                                        | ~link.href = "http://some.link";~ This sets the "href" attribute to "http://some.link"                                                                                                                                                       |
| e.appendChild()                        | Creates a new node inside of the node "e"                                                                         | Let's create two new nodes: ~link.appendChild(document.createTextNode("some text")); node.appendChild(link);~ This first adds some text INSIDE the existing node "link"; the second places the whole link node inside the node named "node". |
| e.style.[attribute]                    | Stores the various style attributes of nodes                                                                      | ~e.style.background = "yellow";~ turns the background of node e yellow                                                                                                                                                                       |

** More Useful Functions
| Function (or Attribute)            | What it does (or is)                                                  | Example                                                                                                                                       |
|------------------------------------+-----------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------|
| ~text.replace(/existing/g, "new")~ | if text is a string, replace "existing" with "new" whenever it occurs | ~text.replace(/ /g, "_")~                                                                                                                     |
| ~str.concat(text)~                 | if str and text are strings, add text to the end of str.              | ~w="https://en.wikipedia.org/wiki/";return w.concat(text);~ add "text" to the end of "https://en.Wikipedia.org/wiki/" and return that string. |
** Solving Part 3
I'm not going to solve this one for you.  But I will divide it into the following tasks:

linkifyClass needs to do this:
- retrieve all elements of class "PM"
- for each element (a ~for ( __ of __)~ loop),
  - retrieve the text content
  - create a Wikipedia link by concatenating "https://en.Wikipedia.org/wiki/" and the text text content
  - call addLink with the parameters {current element}, {text content}, {Wikipedia url}

addLink needs to do this:
- clear the node by setting "node.textContent" or "node.innerHTML" to "";
- create a new "a" element;
- set the href of the new element to "url";
- append a child node to url with the value document.createTextNode(text);
- append the url to node

To do cooler stuff, like turning yellow, or linkifying all the classes, you'll need to do some more work yourself.  
* Spatial History with Google Maps
:PROPERTIES:
:ID:       o2b:c9c77764-7451-42da-96d0-e20ae838551b
:POST_DATE: [2015-07-20 Mon 22:49]
:POSTID:   287
:BLOG:     dig
:EXPORT_FILE_NAME: spatial-history-with-google-maps
:END:
** Google Maps and Spatial History

Today in class we discussed /spatial history/, that is, history which focusses very strongly on the cultural history of space and place. There is nothing /intrinsically digital/ about spatial history, nor is it necessarily qunatitative in nature; but the incredible development of Geographical Information Systems (GIS) in the last 15 years has made the use of interactive digital maps an attractive target for historians.

Sophisticated works such as the [[http://web.stanford.edu/group/spatialhistory/cgi-bin/site/pub.php?id=29][Spatial History Project]] and Ben Schmidt's [[http://sappingattention.blogspot.co.uk/2012/10/data-narratives-and-structural.html][Whaling Maps Project]] take substantial technical effort to achieve their effects; in general, lengthy training in the use of specialized GIS software is required. We have our own example in the [[http://decima.chass.utoronto.ca/][DECIMA Project]] run by Prof. Terpstra in our department.

Our approach will be decidedly more lightweight. In class today, we will build a very simple "Geographical Information System" around a Google Map. Google Maps are, in fact, highly sophisticated GIS's, with powerful tools for accessing various layers of information; but in order to work with them, we will need to use a very small amount of Javascript.
** Read this part! Follow the links! 
Today's exercise is also something of a test.  We will be working in the /[[https://help.github.com/articles/markdown-basics/][markdown]]/ syntax ([[https://help.github.com/articles/github-flavored-markdown/][github flavour]]), and you will also be able to choose between
- working in the [[http://jsbin.com/jusena/10/edit?html,js,output][JSBin Online Editor]], which we saw briefly in the first class, and
  using [[https://github.com/titaniumbones/maps-with-markdown][a copy you can download and work with on your own]].

The latter version also serves as an introduction to the [[https://github.com/][Github code-sharing platform]]. If you continue working with code-based academic projects, you will eventually want to learn more about git, which is an enormously powerful resource.  Our next assignment will also be made available on Github, so this is a chance to get a head start. If you want to work locally, I strongly recommend the newly-released [[https://atom.io/][Atom Code Editor]].  If you also install the atom-html-preview package, you will get live updates of your code in a second tab, almost like in jsbin.  See the [[https://atom.io/docs/v1.0.2/using-atom-atom-packages][documentation]] for more info.    

** What is a GIS?
:PROPERTIES:
:ID:       o2b:29ea8244-dab2-47a5-abae-7aac7fdcabca
:POST_DATE: [2015-07-20 Mon 22:53]
:POSTID:   291
:BLOG:     dig
:END:
GIS is just a name for any system that tries to capture, manipulate, and represent geographical data. There are many GIS tools; the history department uses [[http://www.arcgis.com/features/][ArcGIS]], which is expensive and something of an industry standard, while many independent scholars use [[http://www.qgis.org/en/site/][QGIS]], which is free, open source, and not quite as powerful as Arc.

The data in a GIS is all [[https://en.wikipedia.org/wiki/Geotagging][geotagged]], that is, assigned a set of geographical co-ordinates. This sounds simple but it is actually quite complex, since any co-ordinate system is a /simplified projection/ of real, disordered, 3-dimensional space.  Many of the frustrations of working with GIS comes from the difficulty of rendering (say) historical map images /commensurate/ with modern, satellite-derived maps.

Within a GIS, information is generally accessed as a set of *layers*.  Data of specific types is /stratified/ in layers, in much the same way that one creates image layers in photoshop. This image gives a typical example.  Note that the creation of layers is itself an intellectual decision, relying on judgments about the relationships between individual bits of data.
http://iolandarch.com/wp-content/uploads/2014/09/overlay-analysis.jpg

** Controlling Google Maps
For our exercise today, we are really only interested in two layers:  the "basemap", that is, the street or satellite map most of us use on an almost-daily basis; and the /marker layer/, in which all of the little pins on a map are stored.  We access these layers, and create those markers, with Javascript, by making /calls/ to the /Google Maps API/.

#+BEGIN_ASIDE
An *API* is an "Application Programming Interface": a communications channel that lets programs talk to each other.  By "loading" the Google Maps API, our web pages can communicate directly with Google's servers to modify the map that Google is presenting to us.  In fact, most of the interesting stuff happening on the web these days happens via these machine-to-machine communication channels.  
#+END_API

You don't have to understand the Google Maps API very thoroughly to be able to do this assignment.  The code comes pre-written; all you have to do is hack at it till it does what you want it to.  

** Using Markdown
It was useful to learn HTML but it is a pain to generate it by hand. You do have to do some hand-coding of HTML for this exercise, because some of the work actually happens in Javascript; but the rest of it can be done in markdown, which I find much easier to write than HTML. 

#+BEGIN_SRC markdown
# one or more '#' marks indicates a headline

### this one is "level 3"

*a single asterisk is emphasis, or italics*

**two are strong, or bold**

An empty line separates paragraphs.

> blockquotes are made with angle brackets
> like this

#+END_SRC

You can also mix HTML in with markdown and it will generally render perfectly well. This is important for us because we have to create some ~<div>~ elements, which markdown can't do for us.

While you're coding, reflect on [[https://www.youtube.com/watch?v=Q8gGsuWouDE&t=0m20s][the satisfaction that good, honest work brings to the act of electronic communication]]. 

** The Exercise
Today you will create a web page containing a Google Map.  The Google Map will contain 1-3 markers related to one of the themes we wrote on the blackboard in our last class.  It will also contain a VERY brief essay that discusses the historical significance of the events represented by those markers, all the while paying homage to the project of spatial history: foregrounding the spatial elements of the historical narrative at hand.  You're not handing in your work, so don't fret too much.  Try to enjoy yourself; but also work hard, as this is good preparation for our next assignment, which wil lbe handed out in class on Thursday. 

** The code
*** Javascript
I have made the Javascript as simple as I can. There are more efficient and interesting ways to do this, but they are a little more complex. To make your markers -- and to re-centre your map -- you will need to modify the Javascript directly.
*** HTML
I /think/ the only modifications you will need to make to the HTML are within the special "textarea" block containing the markdown syntax.  The rest you can probably safely ignore, though you might learn something from looking at it.
*** CSS
The CSS for this exercise is deceptively simple.  We make only a few small changes tothe defaults, /but/ we are cheating here.  The [[http://strapdownjs.com/][strapdown]] javascript library which enables us to magically write using markdown, /also/ magically loads the incredible [[http://getbootstrap.com/][bootstrap]] web development framework, which includes some sophisticated CSS.  Try changing the first ~textarea~'s ~theme=united~ to one of the other supported "swatches" -- I'm a fan of "cyborg" and "slate", myself.

* Let's Try Voyant Again
:PROPERTIES:
:EXPORT_FILE_NAME: let's-try-voyant-again
:END:

* Getting to Know Voyant Tools
:PROPERTIES:
:ID:       o2b:39ffe3c2-8d78-48c9-a66c-3b97cb51ffc0
:POST_DATE: [2015-07-14 Tue 09:43]
:POSTID:   204
:BLOG:     dig
:EXPORT_FILE_NAME: getting-to-know-voyant-tools
:END:
Last week we experimented with applying "distant reading" techniques to history using Wordles -- sometimes called "the gateway drug" of textual analysis.  Today we will go a little bit further down this road, using a popular online tool called [[http://beta.voyant-tools.org/][Voyant]] (You may also want to [[https://github.com/sgsinclair/VoyantServer/releases/download/2.0.1-M5/VoyantServer2_0-M5.zip][download and install]] this tool on your own computer, for the next assignment; details about installation are [[http://docs.voyant-tools.org/workshops/dh2015/][here]], under "Getting Setup").

Voyant is a mid-level textual analysis tool; it is quite a bit more complex and flexible than either [[http://wordle.net][Wordle]] or [[http://textexture.com/][Textexture]], but it is still a GUI tool, aimed at end-users who may not be comfortable with coding or the command line.  Note that, if you are really serious about quantitative modelling, you will need more sophisticated and adaptable tools, such as [[http://programminghistorian.org/lessons/topic-modeling-and-mallet][Mallet]] or [[http://www.chlt.org/StatisticalMethods/][R]].  At this point, most large-scale DH projects are using homebrewed solutions that cobble together various pieces of modelling infrastructure, with varying degrees of success. In our next class, we'll explore some of the challenges of that kind of work.  But for today: Voyant!

Voyant is actually a *suite* of tools, all of which operate on the same *corpus*.  So, in order to use it, you will have to import a corpus.  You can use a single text for this purpose, but a large collection of texts is much better.

** Getting Started
First, let's navigate to the [[http://beta.voyant-tools.org/][Voyant Website]]. Note that we are using the Beta version of Voyant 2.0; it is way better than the 1.0 version, and pretty stable.  There are 2 built-in corpora: Shakespeare's plays, and Austen's novels.  For now, let's choose Austen's novels by clicking on "Open" (bottom right of text box) or using [[http://beta.voyant-tools.org/?corpus=austen][this link]] (or [[http://localhost:8888/?corpus=austen][this one]] if you are running a local copy on your computer).  Let's steal some clues from [[http://docs.voyant-tools.org/category/workshops/][this excellent tutorial]], e.g., this picture:
http://docs.voyant-tools.org/files/2015/06/voyant-austen-numbered.png

*** Key
1. Cirrus: a simple wordcloud that displays the highest frequency terms in the corpus (that aren’t in the stopword list)
2. Reader: a infinite scrolling reader for the actual text in the corpus (this fetches the next part of the text as needed)
3. Trends: a visualization of word frequency across the corpus or within each document (depending on the mode)
4. Summary: a high-level summary of data from the corpus
5. Contexts: a list of occurrences of a specified word (this is sometimes called a concordance or a keyword in context)
These are only some of the tools available in Voyant -- you can learn about more such tools in the tutorial linked above. But essentially, we have:
- a *cloud visualization tool*, which is pretty good for /suggesting/ but not so great for /demonstrating/
- several /frequency analysis tools/ which allow comparison within or across texts;
- various /scoping controls/ which allow you to move between a single-text view and a corpus-level view

*** Asking Questions of Austen
So, we have the text. We have the tools.  Now, we need questions.  Let's take a few minutes together to consider the following:
- what /kinds of questions/ are amenable to quantitative analysis?
- which ones /can potntially be answered/ using these tools and this corpus?
  - maybe the most interesting questions are too hard.  Can we simplify the questions to suit the tools?

Bear in mind the kinds of questions Moretti has suggested we ask: questions about form, change over time, place.  

*** Doing the Analysis
In groups of 2-3, take about 20 minutes to fool around with Austen's texts, seeing if you discover anything interesting.; and then take 5 minutes to report back to the group.  

** History, not Literature
So far, most of our work has dealt with literature. Let's try another genre.  The Emory University library has an [[http://disc.library.emory.edu/lincoln/voyant/][interesting exercise]] using a digitized collection of American sermons given immediately after the assassination of Abraham Lincoln in 1865. What can we learn from them?
*** Getting Started
This is just barely more complicated than last time, because we have to add the corpus ourselves.  First, [[http://disc.library.emory.edu/lincoln/download/lincoln_sermons.zip][download all the sermons]] and unzip the downloaded file. Then, go back to [[http://beta.voyant-tools.org/][the Voyant start page]] and click on "upload"; and finally, select all the files in the "text" folder from the download.
*** Asking Questions
Again, we have to aks the question: what can we learn from the bulk analysis of these texts? Or, maybe, can we compare some of the sermons to each other and learn something from that process?
- Note that the original tutorial uses only two sermons, those of Lowe (from South Carolina) and White (from Vermont). Why? 
Let's spend a few minutes thinking about questions, together.
*** Doing the analysis.
As before: in small groups, check out these texts and see if you see anything interesting. 

* Popcorn Exercise!
:PROPERTIES:
:ID:       o2b:43a19a5d-dfd6-40a6-a230-d2477fe491c5
:POST_DATE: [2015-07-28 Tue 10:03]
:POSTID:   322
:BLOG:     dig
:EXPORT_FILE_NAME: popcorn-exercise!
:END:

Ooops, forgot to write this up separately. Oh well. By now, though, you know the drill:

- Navigate to [[https://github.com/titaniumbones/oral-history-template][the Github repository for this exercise]].
- Download and unzip the files
- Open them up in [[http://atom.io][Atom]] or something similar.

This will get you ready for your next assignment.
* Javascript Error in Current Assignment!
:PROPERTIES:
:ID:       o2b:81d8ad9b-38f5-4d09-9cd2-3662aa74210c
:POST_DATE: [2015-07-28 Tue 13:58]
:POSTID:   324
:BLOG:     dig
:EXPORT_FILE_NAME: javascript-error-in-current-assignment!
:END:
Many thanks to Marie for finding an important bug in the current assignment, which you may not have discovered yet. Before this fix, the Info Window would only display for one of the markers.  Once the changes described below are applied, I believe the problem should disappear.  

 The bug was due to unskillful handling of [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Creating_closures_in_loops.3a_A_common_mistake][Javascript Closures]], and the solution was to make use of Javascript's elegant "this" construct, as described in one of the answers posted [[http://stackoverflow.com/questions/3158598/google-maps-api-v3-adding-an-infowindow-to-each-marker][here]].  Here is the bad code, originally on lines 40-51 of ~script.js~:

#+BEGIN_SRC javascript 
    for (j = 0; j < all_my_markers.length; j++) {
        var this_marker =  new google.maps.Marker({
            position: all_my_markers[j].position,
            map: my_map,
            title: all_my_markers[j].title,
            window_content: all_my_markers[j].window_content});
        var this_listener = google.maps.event.addListener(this_marker, 'click', function() {
            infowindow.setContent (this_marker.window_content);
            infowindow.open(my_map, this_marker); 
        });
        my_markers.push({marker:this_marker, listener: this_listener});
    };
#+END_SRC

and here is the corrected code:

#+BEGIN_SRC javascript
    for (j = 0; j < all_my_markers.length; j++) {
        var marker =  new google.maps.Marker({
            position: all_my_markers[j].position,
            map: my_map,
            title: all_my_markers[j].title,
            window_content: all_my_markers[j].window_content});
        marker.info = new google.maps.InfoWindow({content: marker.window_content});
        var listener = google.maps.event.addListener(marker, 'click', function() {
            // if you want to allow multiple info windows, uncomment the next line
            // and comment out the two lines that follow it
            //this.info.open(this.map, this);
            infowindow.setContent (this.window_content);
            infowindow.open(my_map, this);
        });
        my_markers.push({marker:marker, listener:listener});
    }
#+END_SRC

I recommend that *everyone* carefully remove the old "for" loop and replace it with this new code.  It will make your lives better!

* Understanding Popcorn
:PROPERTIES:
:BLOG:     dig
:PARENT:   577
:ID:       o2b:1d77ef33-50dc-4cfd-9bf0-eb246821cfa7
:POST_DATE: [2017-03-10 Fri 10:47]
:POSTID:   624
:EXPORT_FILE_NAME: understanding-popcorn
:END:
You may find it useful, as you prepare for the next assignment, to read the following post!
** What is Popcorn
[[http://popcornjs.org][Popcorn]] is a Javascript "libary" -- a small collection of programs -- that lets web designers key events in a web page to a time-code in a media file.  So essentially ,popcorn lets you "cue up" content ad display it only during fixed periods, while a media element is playing. If you then pause or manually rewind/fast-forward the media element (audio or video), the events will also reset to the appropriate time. 
*** HTML5 & new possibilities
Popcorn works because of new functionality that is provided by the [[http://en.wikipedia.org/wiki/HTML5][HTML5]] standard, and in particular the [[http://www.html5rocks.com/en/features/multimedia][<audio> and <video>]] tags.  So you are working with very new technology here. The new standards let you manipulate audio  and video directly with HTML and Javascript -- something that wasn't possible until about a year ago.   
*** multi-media swiss-army knife
Popcorn is a sort of Swiss army knife for doing multi-media work in HTML5.  There's a main framework -- the popcorn library -- that provides a simple Javascript interface for talking directly to the media elements.  Doing that directly can be hard, so the Popcorn "layer" makes this work quite a bit easier.  This underlying library is used by the [[http://popcornjs.org/plugins][Popcorn plugins]], which are the elements you will actually be working with.  These plugins are fairly simple Javascript programs (the mapping ones are actually kinda complex, and some of the things one wants to do with maps -- especially smoothly animate a pan from one location to another -- aren't available yet, which is too bad and a bit of a disappointment).  It's the plugins that you will actually be working with.  
*** Using Popcorn
To use popcorn in a web page, you need to define a variable -- usually named 'pop' -- that creates a popcorn 'instance' on your web page.  Then you wrap the variable definition in a simple function that makes sure it gets run when the web page loads.  

** Popcorn Plugins
Inside the variable definition, you "call" the plugin function for each event you want to create. The process is very similar to creating timeline events in your timeline -- there's a simple syntax that defines a couple of "parameters" -- variables that get "passed" to the plugin function.  The example file defines a bunch of popcorn events; essentially you'll just change the values of these parameters to create your own events.  So for instance, here's an example plugin definition:
#+BEGIN_SRC javascript
        .footnote({"id":"intro","start":6,"end":16,"target":"popcorn-container","text":"Edna begins by talking about her father, Daniel Kelly (1861-1953). The US census of 1880 for Elgin, IL, gives Daniel’s occupation as blacksmith. In the 1900 census of Port Angeles his occupation is bridge builder; in the 1920 census of Eden Valley it is general farming; in the 1920 census of Eden Valley it is dairy farming.  In the 1930 census of Port Angeles he is retired."})
#+END_SRC
This is one of the plugins you'll use the most -- the footnote plugin. It has just five parameters: 
- *id* -- this is for your benefit so you can keep track of what you're doing. Use it, but don't worry about it too much
- *start* -- when to start playing the element. This is in SECONDS -- so forinstance if you want to it to start playing at 6:34, the value would be 394.  Keep a calculator on hand. Note that the value is *not* in quotation marks -- that's significant.
- *end* -- the end time
- *target* -- where to pop up the event. Don't change this, or your events will show up in the wrong place.  With popcorn you can put the new events anywhere on the page, and change any existing element. It's really powerful; we're just brushing the tip of the iceberg.
- *text* -- this is the text you're going to make appear.  This is where your own contribution really comes in.  

*** Available plugins
We've provided examples for three plugins:
- Footnote you've just seen
- [[http://popcornjs.org/Plugin/image][Image]] lets you display an image. This adds two new parameters -- 'src' and 'href' -- which let you select an image and also link that image to another location, if you so wish.  
- [[http://popcornjs.org/Plugin/google-maps][google Maps]] Creates a google map. There are a bunch of new parameters here, see our source code for more info.
- it's possible you will also want to use others; of these the most likely to be of use is [[http://popcornjs.org/Plugin/Wikipedia][Wikipedia]].
** Media Elements
Popcorn woks by keying commands to a media element -- that is, an HTML tag <audio> or <video>.  Here's our sample audio tag:
#+BEGIN_SRC html
            <!-- this is our audio div.  It's really important -->
             <audio id="media" controls="controls">
               <source src="media/audio/editededna.mp3" type="audio/mp3" />
            </audio>
#+END_SRC
I just want you to note three things about this code:
- See how the <audio> tag has two attributes. The *id* is essential, because when we defined "pop" we told it to look for the element called "id". "controls" is also important -- it ensures that you can pause, rewind, etc. in the browser's buiilt-in media player.
- The actual file that will be used by the "audio" element is not defined in the tag itself, but within it -- in the <source> tags.  

** Getting Help
If you end up confused, there are a couple of useful popcorn resources on the web.  
- the [[http://popcornjs.org/documentation][popcorn website]] has some great tutorials. The videos are particularly helpful, because they highlight the code that's used to create the event you watch on the screen.  You can learn even more by looking at the source code of these pages -- because they use popcorn to write their own tutorials!  
- The [[http://popcornjs.org/plugins][plugins page]] has official documentation of each plugin.  THis is often helpful.
- If that's not enough for you, you can look directly [[https://github.com/cadecairos/popcorn-js][at the source]].
- If you're still confused, take a look at the [[https://mail.mozilla.org/listinfo/community-popcorn][developer's list]] or the [[http://popcornjs.org/community][other resources listed here (e.g., IRC)]]. If you have a question I can't answer, you can ask it one of those places; but please be sure you are asking a well-formed question in a thoughtful, considered way.  The developers are volunteering their time to create this tool, and it is not in any way their responsibility to help you learn basic skills.  Still, they tend to be very generous, so it's a possibility. Exhaust other resources first.

** Generating Events with Tabletop
In class today, we /hand-coded/ our popcorn events. This is not particularly onerous but is a little clumsy. You are absolutely welcome to use this method for the assignment if you like; but there is another way.  the [[https://github.com/jsoma/tabletop][tabletop.js]] library lets you access information from a Google Spreadsheet and plug it into your scripts. I find it very handy for this kind of work (we could have used it for the mapping expercise, too).  In this way, you can create your popcorn events in the leisure of a Google Spreadsheet, and have the events automatically generated for you whenbever your web page loads.  

The process is described [[https://github.com/jsoma/tabletop#1-getting-your-data-out-there][here]], and you are strongly advised to read it carefully. If you want to use the code I've provided for you in ~popcorn-data-with-google.js~, you will need to [[https://docs.google.com/spreadsheets/d/14jExD0zl9nvZyExoMsF_9wWr86Jmrk5c8Crt4G1EJuU/edit#gid=1715955432][copy this spreadsheet]], then *publish it* as described in the instructions, and also *copy the new URL* into the appropriate place in ~popcorn-data-with-google.js~.  Then code your popcorn in the spreadsheet; unless you make any syntax errors, the technical work should now be done. In the spreadsheet ist is somewhat easier, for instance, to arange your events in sequence, etc.
* Some Wordpress Plugins (Image Sliders and Timelines)
:PROPERTIES:
:PARENT:   5
:ID:       o2b:4cba545f-ed63-4094-af28-de8c15b747e4
:POST_DATE: [2016-02-09 Tue 10:59]
:POSTID:   351
:EXPORT_FILE_NAME: some-wordpress-plugins-(image-sliders-and-timelines)
:END:
This is a preliminary list which I'll try to keep updating as we go
** Image Sliders!
Foundation comes with a built-in image slider [[http://foundation.zurb.com/sites/docs/orbit.html][called Orbit, but it is pretty much deprecated]] so we should probably choose one of the many, many other solutions that are available for Wordpress.  

When choosing a slider plugin, it makes sense to think about a couple of different questions:

- *What is the underlying technology?* Most Wordpress image sliders are themselves built on top of /external javascript libraries/.  That is, somewhat writes a pure Javascript tool for image movement, and then another person comes along and writes a Wordpress interface for that Javascript library.  Some of the underlying libraries are great, others less so.  SOme are very flexible, but therefore also complex. Some are pretty, some are ugly.  etc.
- *What am I using this for?* Sometimes you know in advance that all you want this slider for is images.  Other times, yo uwill want more complex content. Some plugins are great and in fact super-easy for workingwith images alone, but will not work /at all/ with more complex content. Other sliders provide a complex interface for designing individual slides; this can be great if you really need all the complex options, but frustratingly opaque if you only need the simple stuff.
- *What's the Wordpress interface like?* Echoing what I just said above, the various Wordpress plugins provide differing user interfaces. You want to choose something that enables the users to do everything they have to, but isn't too complicated for an ordinary user to use. This balance can be hard to achieve, so you may find yourself experimenting quite a bit before you find the right one. So, that means you probably shouldn't invest a whole tonne of time into any one slider until yo're sure it does all you need it to.,

Procedure for making this choice: 
- figure out what you want in a slider
- Find plugins online using the Wordpress plugin search.
- read the descriptions and the reviews
- install and try out one or more
- make a final choice of plugin and start using it 

The Foundation devs recommend using [[http://owlgraphic.com/owlcarousel/][Owl Carousel]] and it has much to recommend it.  A quick search finds [[https://en-ca.wordpress.org/plugins/search.php?q=owl+carousel][many options]].  [[https://en-ca.wordpress.org/plugins/slide-anything/screenshots/][Slide Anything]] in particular looks promising.
** Timelines!
We have talked about having a timeline of events that puts the Flynn family's history in the context of broader historical developments.  In the past, I've used [[https://en-ca.wordpress.org/plugins/knight-lab-timelinejs/][this plugin]], but there are [[https://en-ca.wordpress.org/plugins/tags/timeline][many others]] including [[https://en-ca.wordpress.org/plugins/timelinejs/screenshots/][at least one other plugin that ses the same underlying framework]]. 

Most of these timeline plugins generate their timelines automatically, using pre-existing content that is already on the site. In many ways this is very cool and helpful, because your content is written exactly once, and when you make changes, you don't have to think, "where else did I have that mistake and how can I fix it?" However, a lot of the events on our timeline might not really need to have pages on our website, so that can also be a disadvantage.  

I would suggest trying out several and seeing how they seem to work for you.  I'd also consider making some dummy timelines on your own personal websites and seeing how they seem to work out.
** Image Maps
I've already installed two image mapping plugins on thesite: [[https://wordpress.org/plugins/imagemapper/][Image Mapper]] and [[http://wpdrawattention.com/][Draw Attention]].  You can try both out and see how you like them.
* Adding a Custom Icon to Google Maps Markers 
:PROPERTIES:
:EXPORT_FILE_NAME: adding-a-custom-icon-to-google-maps-markers
:END:
The Google Maps API permits us to set the image that displays on the map as the marker's "icon".  Yo are familiar with the red balloon-like pin hat google uses by default, bt google provides many other options, and you can even define yor own if you like, as long as the image you want to use is on the Internet.  All you need to do is to add an "icon" attribute to the marker object definition.  For or assignment, that means you will need to modify code in at least two places: 

- in the ~all_my_markers~ array


** 
* Ecosystem, Infrastructure, and Tools
:PROPERTIES:
:EXPORT_FILE_NAME: ecosystem,-infrastructure,-and-tools
:END:
SOmetimes we make the mistake of thinking that everything in University is /conceptual/. But we also learn to use the tools of our trade: journals, books, archival finding aids; and increasingly, many, many kinds of software.  
*** Understanding Your Browser
First ask yourself for a second: what is a web browser? Why do we use and need them? Can I get more out of my browser than I have been?
**** Plugins
**** Information Trackers
(bookmarks & history)
**** Developer Tools
- Firw Source
- Inspector
- console
- Scratchpad
*** 
*** Git and Github
*** Google Maps
*** GeoJSON.io
*** Leaflet & OSM
*** Voyant Tools 
*** MALLET 
*** Popcorn js 
*** Odyssey.js
*** Timeline.js
*** Zotero
*** Bibtex
*** 
